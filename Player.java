package gamePlay;

import java.util.HashSet;
import java.util.Set;

/**
 * Player--Abstract superclass for gamePlay players. Subclasses will implement human or computerized
 * players.
 *
 * Class invariant: wordSet != null roundScore <= totalScore
 *
 * @author C. Fox and Noah Kaiser
 * @version 4/25
 */
public abstract class Player
{
  protected int totalScore;
  protected int roundScore;
  protected Set<String> wordSet;

  /**
   * Default constructor for player.
   */
  public Player()
  {
    totalScore = 0;
    roundScore = 0;
  }

  /**
   * Reset the game scores.
   */
  public void resetScores()
  {
    totalScore = 0;
    roundScore = 0;
  }

  /**
   * Assign the round score.
   * 
   * @param s
   *          the score to be altered.
   */
  public void assignRoundScore(int s)
  {
    roundScore = s;
    totalScore += s;
  }

  /**
   * Decrement the round score.
   * 
   * @param s
   *          the score to be altered.
   */
  public void decrementRoundScore(int s)
  {
    roundScore -= s;
    totalScore -= s;
  }

  /**
   * Assign the Player's word set. The assigned word set is filtered to make sure that words are not
   * null, empty, or contain non-letters. All words are changed to lowercase.
   *
   * @param newWordSet
   *          words generated by a user
   */
  public void setWordSet(Set<String> newWordSet)
  {
    if (newWordSet == null)
      return;

    // ensure each word is all letters, not empty, and lowercase
    wordSet = new HashSet<>();
    for (String word : newWordSet)
    {
      if (word == null)
        continue;
      if (0 == word.length())
        continue;
      if (word.matches(".*[^a-zA-Z].*"))
        continue;
      wordSet.add(word.toLowerCase());
    }
  }

  /**
   * Get the round score.
   * 
   * @return the round score.
   */
  public int getRoundScore()
  {
    return roundScore;
  }

  /**
   * Get the total score.
   * 
   * @return the total score.
   */
  public int getTotalScore()
  {
    return totalScore;
  }

  /**
   * Get the word set.
   * 
   * @return the word set.
   */
  public Set<String> getWordSet()
  {
    return wordSet;
  }

  /**
   * Abstract method to find words.
   * 
   * @param b
   *          the board to search on.
   */
  public abstract void findWords(Board b);
}
